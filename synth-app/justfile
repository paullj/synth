set dotenv-path := "../.env"

_default:
  @just --list

# Copy the SSH key to the device, so we can ssh into it without a password
[group("setup")]
copy-ssh-key:
  ssh-copy-id $DEVICE_USER@$DEVICE_HOST

# Generate a systemd service file for the app, and add it to the device
[group('setup')]
setup-service:
  ./scripts/generate_service.sh "./services/app.service.template" $DEVICE_USER $DEVICE_APP_DIR/$DEVICE_APP_NAME "./services/app.service"
  ./scripts/add_service.sh $DEVICE_USER $DEVICE_HOST $DEVICE_APP_NAME "services/app.service" $DEVICE_APP_DIR

# Runs a dev binary in release mode
[group('local')]
dev:
  @cargo run --bin local --release --features local

# Build binary for device
[group('raspberry_pi')]
build:
  @cross build --bin raspberry_pi --release --target $DEVICE_TARGET --features raspberry_pi

# Deploy a binary to the device
[group('raspberry_pi')]
deploy:
  scp target/$DEVICE_TARGET/release/raspberry_pi $DEVICE_USER@$DEVICE_HOST:$DEVICE_APP_DIR/$DEVICE_APP_NAME
  @echo "âœ… Deployed to $DEVICE_HOST at $DEVICE_APP_DIR/$DEVICE_APP_NAME...\n"

# Build the binary, copy it to the remote device, and run it
[group('raspberry_pi')]
run:
  @just build
  -@just kill
  @just deploy
  @ssh $DEVICE_USER@$DEVICE_HOST "chmod +x $DEVICE_APP_DIR/$DEVICE_APP_NAME && $DEVICE_APP_DIR/$DEVICE_APP_NAME"

[group('device')]
kill:
  @ssh $DEVICE_USER@$DEVICE_HOST "killall $DEVICE_APP_NAME"
